// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library com.chris.flatbuffer_example.data;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class Person {
  Person._(this._bc, this._bcOffset);
  factory Person(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Person> reader = _PersonReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get bloodVolume => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  double get speed => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 8, 0.0);
  bool get canFly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  Bag? get bag => Bag.reader.vTableGetNullable(_bc, _bcOffset, 12);
  List<Weapon>? get weapons => const fb.ListReader<Weapon>(Weapon.reader).vTableGetNullable(_bc, _bcOffset, 14);
  List<String>? get accessories => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'Person{name: $name, bloodVolume: $bloodVolume, speed: $speed, canFly: $canFly, bag: $bag, weapons: $weapons, accessories: $accessories}';
  }
}

class _PersonReader extends fb.TableReader<Person> {
  const _PersonReader();

  @override
  Person createObject(fb.BufferContext bc, int offset) => 
    Person._(bc, offset);
}

class PersonBuilder {
  PersonBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addBloodVolume(int? bloodVolume) {
    fbBuilder.addInt32(1, bloodVolume);
    return fbBuilder.offset;
  }
  int addSpeed(double? speed) {
    fbBuilder.addFloat64(2, speed);
    return fbBuilder.offset;
  }
  int addCanFly(bool? canFly) {
    fbBuilder.addBool(3, canFly);
    return fbBuilder.offset;
  }
  int addBagOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addWeaponsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addAccessoriesOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PersonObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final int? _bloodVolume;
  final double? _speed;
  final bool? _canFly;
  final BagObjectBuilder? _bag;
  final List<WeaponObjectBuilder>? _weapons;
  final List<String>? _accessories;

  PersonObjectBuilder({
    String? name,
    int? bloodVolume,
    double? speed,
    bool? canFly,
    BagObjectBuilder? bag,
    List<WeaponObjectBuilder>? weapons,
    List<String>? accessories,
  })
      : _name = name,
        _bloodVolume = bloodVolume,
        _speed = speed,
        _canFly = canFly,
        _bag = bag,
        _weapons = weapons,
        _accessories = accessories;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? bagOffset = _bag?.getOrCreateOffset(fbBuilder);
    final int? weaponsOffset = _weapons == null ? null
        : fbBuilder.writeList(_weapons!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? accessoriesOffset = _accessories == null ? null
        : fbBuilder.writeList(_accessories!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addInt32(1, _bloodVolume);
    fbBuilder.addFloat64(2, _speed);
    fbBuilder.addBool(3, _canFly);
    fbBuilder.addOffset(4, bagOffset);
    fbBuilder.addOffset(5, weaponsOffset);
    fbBuilder.addOffset(6, accessoriesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Weapon {
  Weapon._(this._bc, this._bcOffset);
  factory Weapon(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Weapon> reader = _WeaponReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get damage => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'Weapon{name: $name, damage: $damage}';
  }
}

class _WeaponReader extends fb.TableReader<Weapon> {
  const _WeaponReader();

  @override
  Weapon createObject(fb.BufferContext bc, int offset) => 
    Weapon._(bc, offset);
}

class WeaponBuilder {
  WeaponBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDamage(int? damage) {
    fbBuilder.addInt32(1, damage);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WeaponObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final int? _damage;

  WeaponObjectBuilder({
    String? name,
    int? damage,
  })
      : _name = name,
        _damage = damage;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addInt32(1, _damage);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Bag {
  Bag._(this._bc, this._bcOffset);
  factory Bag(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Bag> reader = _BagReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get capacity => const fb.Int16Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'Bag{name: $name, capacity: $capacity}';
  }
}

class _BagReader extends fb.TableReader<Bag> {
  const _BagReader();

  @override
  Bag createObject(fb.BufferContext bc, int offset) => 
    Bag._(bc, offset);
}

class BagBuilder {
  BagBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addCapacity(int? capacity) {
    fbBuilder.addInt16(1, capacity);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BagObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final int? _capacity;

  BagObjectBuilder({
    String? name,
    int? capacity,
  })
      : _name = name,
        _capacity = capacity;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addInt16(1, _capacity);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
